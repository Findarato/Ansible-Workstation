---
- name: üìÅ Create temporary build directory
  ansible.builtin.tempfile:
    state: directory
    suffix: ".build"
  register: scratch_dir

- name: scratch_dir
  debug:
    msg: "{{ scratch_dir }}"

- name: üìÅ Create Automount Directories
  file:
    path: "{{ item.mount.where }}"
    state: directory
  with_items:
    - "{{ network_automounts }}"
    - "{{ local_automounts }}"
  when:
    - enable_automounts is true

- name: üñπ Make Local systemd mounts
  ansible.builtin.template:
    owner: root
    src: "mount-systemd-local.mount.j2"
    dest: "/etc/systemd/system/{{ item.name }}.mount"
    setype: systemd_unit_file_t
  with_items:
    - "{{ local_automounts }}"
  when:
    - enable_automounts is true

- name: üñπ Make Network systemd mounts
  ansible.builtin.template:
    owner: root
    src: "mount-systemd-network.mount.j2"
    dest: "/etc/systemd/system/{{ item.name }}.mount"
    setype: systemd_unit_file_t
  with_items:
    - "{{ network_automounts }}"
  when:
    - enable_automounts is true

- name: üñπ Install systemd Automounts files
  ansible.builtin.template:
    owner: root
    src: "mount-systemd.automount.j2"
    dest: "/etc/systemd/system/{{ item.name }}.automount"
    setype: systemd_unit_file_t
  with_items:
    - "{{ network_automounts }}"
    - "{{ local_automounts }}"
  when:
    - enable_automounts is true

- name: Enable Automounts
  ansible.builtin.systemd:
    daemon_reload: yes
    #state: started
    enabled: true
    name: "{{ item.name }}.automount"
  with_items:
    - "{{ network_automounts }}"
    - "{{ local_automounts }}"
  when:
    - enable_automounts is true

- name: Create src folder
  file:
    path: "/home/{{ local_user }}/Documents/src/"
    state: directory
    owner: "{{ local_user }}"
    mode: 0750

- name: Clone dotfiles repos
  become: false
  git:
    repo: "{{ dotfiles_repo_rw }}"
    dest: "/home/{{ local_user }}/dotfiles"
    key_file: "/home/{{ local_user }}/.ssh/github"
    accept_hostkey: yes
    track_submodules: yes
    update: yes
    # version:          v1.7
  register: result
  ignore_errors: true
  tags:
    - git
    - dotfiles

- name: Setup and Install i3
  include_tasks: "{{ ansible_distribution }}/i3.yml"
  when:
    - install_i3 == true
  tags:
    - i3
    - install

- name: Running OS specific Configurations and Commands
  include_tasks: "{{ include_file }}"
  with_items:
    - "repos.yml"
    # - "system.yml"
    - "packages.yml"
    - "gaming.yml"
    # - "services.yml"
    # - "configuration.yml"
  loop_control:
    loop_var: include_file
  tags:
    - configuration

- name: Setup Ram CACHE fstab
  mount:
    path: /mnt/cache
    src: tmpfs
    fstype: tmpfs
    state: present
    opts: "nodev,nosuid,noexec,nodiratime,size={{ ram_cache_size }}"
  when:
    - ram_cache == true
